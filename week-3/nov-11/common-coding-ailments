COMMON CODING AILMENTS

* Not enough planning and designing before beginning coding

* Not breaking the problem down into small enough pieces, which makes it harder to write effective code and harder to debug problems

* Not following the path of Progressive Enhancement:
  * Build a little piece
  * Test that it works
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built
  * Build another little piece
  * Test that it works and that it does not break anything previously built

* The "'But I Have So Much Code' Fallacy" in that there is so much on the screen that they must somehow be close to a solution

* Cutting corners on actually understanding how fundamental structures work, usually as a result of grabbing pieces of code from here and there and then slapping them together. Or being more focused on making things work than understanding how they are working.

* Generally going too fast in all stages of the process. What you end up doing is learning/creating mistakes that are much more difficult and time-consuming to undo than a methodical approach would have been the first time around.
